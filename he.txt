/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation;
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

#include "ns3/core-module.h"
#include "ns3/network-module.h"
#include "ns3/csma-module.h"
#include "ns3/internet-module.h"
#include "ns3/point-to-point-module.h"
#include "ns3/applications-module.h"
#include "ns3/ipv4-global-routing-helper.h"
#include "ns3/netanim-module.h"

// Default Network Topology
//
//       10.1.1.0
// n0 -------------- n1   n2   n3   n4
//    point-to-point  |    |    |    |
//                    ================
//                      LAN 10.1.2.0


using namespace ns3;

NS_LOG_COMPONENT_DEFINE ("SecondScriptExample");

int 
main (int argc, char *argv[])
{
  bool verbose = true;
  uint32_t nCsma = 3;

  CommandLine cmd;
  cmd.AddValue ("nCsma", "Number of \"extra\" CSMA nodes/devices", nCsma);
  cmd.AddValue ("verbose", "Tell echo applications to log if true", verbose);

  cmd.Parse (argc,argv);

  if (verbose)
    {
      LogComponentEnable ("UdpEchoClientApplication", LOG_LEVEL_INFO);
      LogComponentEnable ("UdpEchoServerApplication", LOG_LEVEL_INFO);
    }

  nCsma = nCsma == 0 ? 1 : nCsma;

//create nodes
  NodeContainer p2pNodes1;//c
  p2pNodes1.Create (2);//c

  NodeContainer p2pNodes2;//c
  p2pNodes2.Add (p2pNodes1.Get (1));//c
  p2pNodes2.Create (1);//c

  NodeContainer csmaNodes;//c
  csmaNodes.Add (p2pNodes2.Get (1));//c
  csmaNodes.Create (3);//c


//point to point
  PointToPointHelper pointToPoint;
  pointToPoint.SetDeviceAttribute ("DataRate", StringValue ("10Mbps"));
  pointToPoint.SetChannelAttribute ("Delay", StringValue ("3ms"));

  NetDeviceContainer p2pDevices1;//c
  p2pDevices1 = pointToPoint.Install (p2pNodes1);//c
  
  NetDeviceContainer p2pDevices2;//c
  p2pDevices2 = pointToPoint.Install (p2pNodes2);//c

  CsmaHelper csma;
  csma.SetChannelAttribute ("DataRate", StringValue ("275Mbps"));
  csma.SetChannelAttribute ("Delay", TimeValue (NanoSeconds (500)));

  NetDeviceContainer csmaDevices;
  csmaDevices = csma.Install (csmaNodes);



//stack
  InternetStackHelper stack;
  stack.Install (p2pNodes1);//c
  stack.Install (csmaNodes);//c



//assign ip
  Ipv4AddressHelper address;
  address.SetBase ("10.1.1.0", "255.255.255.0");//c
  Ipv4InterfaceContainer p2pInterfaces;
  p2pInterfaces = address.Assign (p2pDevices1);//c
  
  address.SetBase ("10.1.2.0", "255.255.255.0");//c
  p2pInterfaces = address.Assign (p2pDevices2);//c
  
  address.SetBase ("10.1.3.0", "255.255.255.0");//c
  Ipv4InterfaceContainer csmaInterfaces;
  csmaInterfaces = address.Assign (csmaDevices);//c


//server / client
  UdpEchoServerHelper echoServer (9);

  ApplicationContainer serverApps = echoServer.Install (csmaNodes.Get (1));//c
  serverApps.Start (Seconds (1.0));
  serverApps.Stop (Seconds (10.0));

  UdpEchoClientHelper echoClient (csmaInterfaces.GetAddress (1), 9);//c
  echoClient.SetAttribute ("MaxPackets", UintegerValue (1));
  echoClient.SetAttribute ("Interval", TimeValue (Seconds (1.0)));
  echoClient.SetAttribute ("PacketSize", UintegerValue (2048));

  ApplicationContainer clientApps = echoClient.Install (p2pNodes1.Get (0));//c
  clientApps.Start (Seconds (2.0));
  clientApps.Stop (Seconds (10.0));

  Ipv4GlobalRoutingHelper::PopulateRoutingTables ();


//pcap
  pointToPoint.EnablePcapAll ("second");//c
  csma.EnablePcap ("second", csmaDevices.Get (1), true);//c
  
  
  AnimationInterface anim("NST.xml");
  anim.SetConstantPosition (p2pNodes1.Get (0), 10, 10);
  anim.SetConstantPosition (p2pNodes1.Get (1), 20, 20);
  
  anim.SetConstantPosition (p2pNodes2.Get (0), 30, 30);
  anim.SetConstantPosition (p2pNodes2.Get (1), 40, 40);
  
  anim.SetConstantPosition (csmaNodes.Get (0), 50, 50);
  anim.SetConstantPosition (csmaNodes.Get (1), 60, 60);
  anim.SetConstantPosition (csmaNodes.Get (2), 70, 70);
  anim.SetConstantPosition (csmaNodes.Get (3), 80, 80);
  

//ascii trace
  AsciiTraceHelper ascii;
  pointToPoint.EnableAsciiAll (ascii.CreateFileStream ("NSTpoint-to-point-olsr.tr"));
  csma.EnableAsciiAll (ascii.CreateFileStream ("NSTcsma.tr"));
  

  Simulator::Run ();
  Simulator::Destroy ();
  return 0;
}


-----------------
touch Ipl.txt
touch Ipl.plt

Enter table data
type - set terminal pdf
output name - set output "ipl.pdf"
Graph title - set title "2022 IPL Points table"
set data style histogram - set tyle data histogram
set style as fill solid - set style fill solid
set histogram style as duster - set style histogram dustered
set coloumn 1 for xlable - set x lable "team"


use 2,3 and 4th cloumn for plot, give title for everybar arcording to the given table

plot "ipl.txt" using 2:xtic(1) title "win matches", "ipl.txt using 3:1xtic(1)title "lost matches", "ipl.txt" using 4:xtic(1) title "points"

gnuplot filename.plt

------------------

copy seven.cc to scratch floder

269-output wrapper change file name ("details.cwnd")

complile - ./waf --run scratch/seventh.cc

ns.3.33 details.cwnd copy and paste other folder

= click find replace find \d replace space 

crate empty  exam.examplot.plt and open

set terminal pdf
set output"output1.pdf"
set title"congention window"
set xlable"time"
set ylable "congention window"

plot "details.cwnd" using 1:3 with linepoints title "old value" , "details.cwnd" using 1:2 with impulse title "New value"

gnuplotÂ examplot.plt